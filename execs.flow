# yaml-language-server: $schema=https://flowexec.io/schemas/flowfile_schema.json
tags: [development]
executables:
  - verb: validate
    description: Run all development checks
    serial:
      execs:
        - ref: generate
        - ref: lint
        - ref: test tui
        - ref: validate generated
        - cmd: echo "✅ All development checks passed"

  - verb: test
    name: tui
    aliases: [go]
    tags: [go]
    description: Run tests with coverage
    serial:
      dir: //
      params:
        - envKey: COLORFGBG
          text: 15;0
        - envKey: COLORTERM
          text: truecolor
        - envKey: TERM
          text: xterm-256color
      execs:
        # TODO: Add -race flag when the container becomes thread safe
        - cmd: |
            set -e
            echo "Running Go unit tests..."
            if [ "$CI" = "true" ]; then
              echo "Running Go unit tests with coverage..."
              go test -coverprofile=coverage.out -covermode=atomic ./...
            else
              go test ./...
            fi
            echo "Unit tests completed"
          retries: 3

  - verb: generate
    tags: [go]
    exec:
      dir: //
      cmd: |
        echo "Generating go CLI code..."
        go generate ./...
        echo "All go code generated successfully"

  - verb: validate
    name: generated
    description: Check for uncommitted generated files
    exec:
      dir: //
      cmd: |
        echo "Checking for uncommitted generated files..."

        if [ -n "$(git status --porcelain)" ]; then
          echo "❌ Generated files are not up to date!"
          echo "Please run 'flow generate' and commit the changes."
          echo ""
          echo "Uncommitted changes:"
          git status --porcelain
          exit 1
        else
          echo "✅ All generated files are up to date"
        fi

  - verb: test
    name: snapshot
    description: Run the snapshot tests
    exec:
      dir: //
      params:
        - envKey: COLORFGBG
          text: 15;0
        - envKey: COLORTERM
          text: truecolor
        - envKey: TERM
          text: xterm-256color
      args:
        - envKey: BUILDER
          pos: 1
          default: podman
      cmd: |
        $BUILDER run --rm -it -v "$PWD":/go/src/app -w /go/src/app \
          -e COLORFGBG=$COLORFGBG -e COLORTERM=$COLORTERM -e TERM=$TERM \
          golang:1.23-bookworm go test ./container_test.go

  - verb: update
    name: snapshot
    description: Update the snapshot test golden files
    exec:
      dir: //
      params:
        - envKey: COLORFGBG
          text: 15;0
        - envKey: COLORTERM
          text: truecolor
        - envKey: TERM
          text: xterm-256color
      args:
        - envKey: BUILDER
          pos: 1
          default: podman
      cmd: |
        $BUILDER run --rm -it -v "$PWD":/go/src/app -w /go/src/app \
          -e COLORFGBG=$COLORFGBG -e COLORTERM=$COLORTERM -e TERM=$TERM \
          golang:1.23-bookworm go test -update ./container_test.go

  - verb: run
    name: sample
    description: Run the sample container program
    visibility: hidden # TODO: fix running of tea programs from within the container
    exec:
      dir: //
      args:
        - envKey: VIEW
          pos: 1
          default: frame
      logMode: text
      cmd: go run ./sample --view $VIEW

  - verb: lint
    tags: [go]
    description: Run linters and formatters
    parallel:
      dir: //
      failFast: false
      execs:
        - cmd: go fmt ./...
        - cmd: go mod tidy
        - cmd: |
            if ! command -v golangci-lint &> /dev/null; then
              echo "Installing golangci-lint..."
              curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s v2.1.6
              export PATH="$PATH:./bin"
            fi
            
            if [ "$CI" = "true" ]; then
              echo "Running golangci-lint with sarif output..."
              golangci-lint run ./... --fix --output.sarif.path lint.sarif
            else
              golangci-lint run ./... --fix
            fi

  - verb: scan
    name: security
    tags: [security, go]
    description: Run security scanning with govulncheck
    exec:
      dir: //
      cmd: |
        if ! command -v govulncheck &> /dev/null; then
          echo "Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
        fi
        
        if [ "$CI" = "true" ]; then
          govulncheck -format sarif ./... > govuln.sarif
          echo "Security scan completed. Results saved to govuln.sarif"
        else
          govulncheck ./...
          echo "Security scan completed. No vulnerabilities found."
        fi
